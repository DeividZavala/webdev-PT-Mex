#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

const io = require('socket.io')(server);
// nos traemos la funcion;
const bidController = require("../helpers/socket-io");

io.on('connection', function(socket){
    socket.on('disconnect', function(){
        console.log('user disconnected');
    });

    socket.on("connected", () => {
      console.log("conectado");
    });

    //subasta
    socket.on('bid', function(bid){
        bidController.update(bid)
            .populate("leader", "username")
            .then(bid => {
                let updatedBid = {
                  item: bid._id,
                  user: bid.leader.username
                };
                io.emit('bid', updatedBid);
            })

    });

});

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
